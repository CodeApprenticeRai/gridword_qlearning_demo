import json

class config:
    def __init__(self):
        self.load()
        self.setting_names = self.config[0].keys()
        return
    
    def load(self):
        with open('config.json', 'r') as f:
            self.config =json.load(f)
        return

    def save(self):
        with open('config.json', 'w') as f:
            json.dump(self.config, f)
        return

    def validate_input(self, prompt, validation_func, cast, failure_prompt):
        valid_input = False
        user_response = None
        while (not valid_input):
            try:
                user_response = cast(input(prompt))
                valid_input = validation_func(user_response)
            except ValueError:
                print(failure_prompt)
        return user_response
    
    def _print_current_settings(self):
        print("Current Settings:", end="\n")
        
        for i in range(len(self.setting_names)):
            setting_name = self.setting_names[i]

            info = self.config[self.env_label][setting_name]
            match setting_name:
                case 'NEXT_ID':
                    continue
                case 'TABLE_FILENAME':
                    if len(info) == 0:
                        print("TABLE_FILENAME: Autogenerated")
                    else:
                        output = ""
                        output += f"[{i}] {setting_name}: "
                        output += f"{info}"
                case _:
                    output = ""
                    output += f"[{i}] {setting_name}: "
                    if 'last' not in info:
                        output += f"{info['default']} (default)"
                    else:
                        output += f"{info['last']}"
                    print(output)
        return

    def table_filename(self):
        filename = "q_table_"
        
        match self.env_label:
            case 0:
                filename += 'cartpole'
            case 1:
                filename += 'gridworld'
        filename += self.config[self.env_label]['NEXT_ID']

        self.config[self.env_label]['TABLE_FILENAME'] = filename 
        return filename
    
    def update_config_prompt(self):
        prompt = "Chooose an environment: 0 for cartpole, 1 for gridworld"
        validation_func = lambda resp: resp in (0,1)
        self.env_label = self.validate_input(prompt, validation_func, int, "Please enter 0 or 1")
        
        exit_settings_update = False
        while (not exit_settings_update):
            self._print_current_settings()

            print("To change a setting, enter the number corresponding to the setting and press enter.")
            print("To confirm current settings without any changes, press enter without entering a number.")
            resp = input("Choice: ")
            
            if (len(resp) == 0):
                exit_settings_update = True

                print("Settings confirmed.")

            else:
                resp = int(resp)
                
                n_settings = len(self.setting_names)
                assert ((resp < n_settings) and (resp > 0))
                
                setting_name = self.setting_names[resp]
                if (len(self.config[self.env_label]['TABLE_FILENAME']) == 0):
                    self.table_filename()
                match setting_name:
                    case 'TABLE_FILENAME':
                        self.config[self.env_label]['NEXT_ID'] += 1
                        print(f'{setting_name} is autogenerated and will be set to {self.table_filename()}')
                    case _:
                        info = self.config[self.env_label][setting_name]
                        print(f'Setting {setting_name} has range {info["low"]} to {info["high"]}')
                        inferred_type = type(info['default'])
                        value = inferred_type(input(f'Enter a value for {setting_name}: '))
                        assert value >= info['low']
                        assert value <= info['high']

                        self.config[self.env_label][setting_name]['last'] = value
                        print(f'Setting \'{setting_name}\' changed to {value}')
            self.save()   
        return